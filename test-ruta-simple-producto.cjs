// Script para verificar si el problema es la complejidad de la ruta
// Vamos a buscar en el servidor si la ruta se est√° registrando correctamente

console.log('Buscando la definici√≥n de la ruta de productos...');

const fs = require('fs');
const path = require('path');

// Leer el archivo index.tsx
const filePath = path.join(__dirname, 'src', 'index.tsx');
const content = fs.readFileSync(filePath, 'utf8');

// Buscar la l√≠nea espec√≠fica donde est√° la ruta
const lines = content.split('\n');

let found = false;
let productRouteStart = -1;
let productRouteEnd = -1;

for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    if (line.includes("app.get('/dashboard/productos/:id/editar'")) {
        console.log(`‚úÖ Ruta encontrada en l√≠nea ${i + 1}: ${line.trim()}`);
        productRouteStart = i;
        found = true;
    }
    
    if (found && line.trim() === '})') {
        productRouteEnd = i;
        console.log(`‚úÖ Cierre de ruta encontrado en l√≠nea ${i + 1}: ${line.trim()}`);
        break;
    }
}

if (found) {
    console.log(`‚úÖ Ruta completa: l√≠neas ${productRouteStart + 1} - ${productRouteEnd + 1}`);
    console.log(`üìè Longitud de la ruta: ${productRouteEnd - productRouteStart + 1} l√≠neas`);
    
    // Verificar si hay errores de sintaxis obvios
    const routeContent = lines.slice(productRouteStart, productRouteEnd + 1).join('\n');
    
    // Buscar posibles problemas
    const backticks = (routeContent.match(/`/g) || []).length;
    console.log(`üìù Backticks en la ruta: ${backticks} ${backticks % 2 === 0 ? '(PAR ‚úÖ)' : '(IMPAR ‚ùå)'}`);
    
    const braces = {
        open: (routeContent.match(/{/g) || []).length,
        close: (routeContent.match(/}/g) || []).length
    };
    console.log(`üìù Llaves: ${braces.open} abiertas, ${braces.close} cerradas ${braces.open === braces.close ? '(BALANCEADAS ‚úÖ)' : '(DESBALANCEADAS ‚ùå)'}`);
    
    const parens = {
        open: (routeContent.match(/\(/g) || []).length,
        close: (routeContent.match(/\)/g) || []).length
    };
    console.log(`üìù Par√©ntesis: ${parens.open} abiertos, ${parens.close} cerrados ${parens.open === parens.close ? '(BALANCEADOS ‚úÖ)' : '(DESBALANCEADOS ‚ùå)'}`);
    
} else {
    console.log('‚ùå Ruta de productos NO encontrada');
}

// Ahora verificar la ruta de proyectos para comparar
console.log('\n--- COMPARANDO CON RUTA DE PROYECTOS ---');

let projectRouteStart = -1;
let projectRouteEnd = -1;

for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    if (line.includes("app.get('/dashboard/proyectos/:id/editar'")) {
        console.log(`‚úÖ Ruta de proyectos encontrada en l√≠nea ${i + 1}: ${line.trim()}`);
        projectRouteStart = i;
        
        // Buscar el cierre
        for (let j = i; j < lines.length; j++) {
            if (lines[j].trim() === '})') {
                projectRouteEnd = j;
                console.log(`‚úÖ Cierre de ruta de proyectos en l√≠nea ${j + 1}`);
                break;
            }
        }
        break;
    }
}

if (projectRouteStart >= 0 && projectRouteEnd >= 0) {
    console.log(`‚úÖ Ruta de proyectos: l√≠neas ${projectRouteStart + 1} - ${projectRouteEnd + 1}`);
    console.log(`üìè Longitud: ${projectRouteEnd - projectRouteStart + 1} l√≠neas`);
}

// Verificar orden de las rutas
console.log('\n--- ORDEN DE LAS RUTAS ---');
console.log(`Ruta proyectos: l√≠nea ${projectRouteStart + 1}`);
console.log(`Ruta productos: l√≠nea ${productRouteStart + 1}`);
console.log(`Ruta fallback (*): cerca de l√≠nea 10397`);

if (productRouteStart < 10397) {
    console.log('‚úÖ La ruta de productos est√° ANTES del fallback (correcto)');
} else {
    console.log('‚ùå La ruta de productos est√° DESPU√âS del fallback (PROBLEMA)');
}