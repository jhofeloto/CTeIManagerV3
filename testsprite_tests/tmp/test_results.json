[
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "9e0f544a-c694-45f9-97c9-0e7d332eaf84",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC001-Valid JWT Authentication with All Roles",
    "description": "Verify that users with valid JWT tokens and roles ADMIN, INVESTIGATOR, and COMMUNITY can successfully authenticate and access the system according to their permissions.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to open login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin credentials and submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since the test plan execution failed and expected result is unknown\n        assert False, 'Test plan execution failed: generic failing assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login functionality is not working as expected. Unable to authenticate with valid admin credentials. Cannot proceed with JWT token and role-based access tests. Please fix the login issue first.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771719810334//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.014Z",
    "modified": "2025-09-25T03:41:59.973Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "5c0d2096-ed3e-45cd-9e69-91d7eafac64d",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC002-JWT Authentication with Expired or Invalid Token",
    "description": "Ensure the system denies access when users present expired, malformed, or tampered JWT tokens.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to open login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Perform login with valid credentials to obtain a valid JWT token for manipulation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Generic failing assertion since expected result is unknown\n        assert False, 'Test failed due to unknown expected result after failed test plan execution.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing due to inability to log in and obtain JWT token. Login form remains on screen after submitting valid credentials with no error or success indication. Cannot proceed with JWT token validation tests.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771723333046//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.020Z",
    "modified": "2025-09-25T03:42:03.502Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "7e391082-7feb-44c4-a227-2548ef75e1ee",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC003-Admin CRUD Management of Projects",
    "description": "Verify completeness of CRUD (Create, Read, Update, Delete) operations on projects by users with ADMIN role including status transitions, collaborator assignments, and metadata updates.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to start login as ADMIN.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input ADMIN email and password, then submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login as ADMIN failed due to the page not navigating after form submission. Unable to proceed with CRUD operations testing. Issue reported.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771732866047//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.026Z",
    "modified": "2025-09-25T03:42:13.011Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "0ea7abfa-babf-4e05-93ca-471e86a82055",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC004-Investigator Project and Product Collaboration",
    "description": "Validate that users with INVESTIGATOR role can create, update, and collaborate on projects and scientific products as permitted.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click 'Ingresar' button to start authentication.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then click 'Ingresar' button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try alternative login method using 'Login rápido para testing' button if available, or report website issue and stop.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Mis Proyectos' to navigate to projects page and start project creation.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/aside/nav/ul/li[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Nuevo Proyecto' button to start creating a new project.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/main/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the project title, summary, keywords, introduction, and methodology, then submit the form to create the project.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto de Investigación sobre Biodiversidad')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Este proyecto tiene como objetivo estudiar la biodiversidad en la región del Chocó.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div[3]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('biodiversidad, investigación, Chocó')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div[4]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Introducción al estudio de la biodiversidad en el Chocó.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div[5]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Metodología basada en muestreos y análisis estadísticos.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to the project edit page to add collaborators.\n        await page.goto('http://127.0.0.1:3000/dashboard/proyectos/1/editar', timeout=10000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Test stopped due to access restriction preventing INVESTIGATOR role from editing projects. Reported the issue for resolution. Cannot proceed with creating, updating, or collaborating on projects and scientific products as required by the task.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[WARNING] No se encontró token de autenticación en localStorage (at http://127.0.0.1:3000/dashboard/proyectos/1/editar:731:24)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771873481791//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.033Z",
    "modified": "2025-09-25T03:44:33.620Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "751fca49-67bb-4c28-b704-0a10bbdb59dc",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC005-Community Role Access and Restrictions",
    "description": "Confirm that COMMUNITY role users have read-only or limited access and cannot perform unauthorized mutations.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to start login process as COMMUNITY user.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input COMMUNITY user email and password, then click 'Ingresar' to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('community@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('community123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Unauthorized mutations should be blocked for COMMUNITY role users.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login for COMMUNITY user failed repeatedly, preventing verification of read-only or mutation restrictions. Reported the issue and stopped further testing.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/175877172329741//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.038Z",
    "modified": "2025-09-25T03:42:03.442Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "999e54bf-5f86-4277-be23-4d65665fb039",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC006-File Upload and Retrieval with Cloudflare R2",
    "description": "Test upload, storage, and retrieval of multiple file formats (docs, images, pdfs) for project and product attachments using Cloudflare R2 Storage.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to login as admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login failure prevents access to project edit page for file upload testing. Reported issue and stopped further actions.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771729660915//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.044Z",
    "modified": "2025-09-25T03:42:09.814Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "4641bce6-57b1-4af8-a5c9-80b364c0956a",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC007-Administrative Management of Users and Roles",
    "description": "Ensure ADMIN users can create, update, assign roles, revoke access, and delete users through the admin panel and API.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to start login as ADMIN.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then click 'Ingresar' to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login as ADMIN user failed repeatedly, blocking all further admin panel user management tests. Reporting issue and stopping.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/175877173180379//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.050Z",
    "modified": "2025-09-25T03:42:11.947Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "8b70a9a1-9abd-42ca-9b33-a855c2b2dd93",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC008-Management and Prioritization of Action Lines",
    "description": "Verify CRUD operations and prioritization for departmental action lines and their association to projects.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click 'Ingresar' button to login as admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then click 'Ingresar' to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try alternative login method using the 'Login rápido para testing' button if available, or report the website issue and stop.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to 'Mis Proyectos' to check for existing projects or create a new project to test action lines.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/aside/nav/ul/li[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Crear Mi Primer Proyecto' button to create a new project for testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/main/div/div[2]/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in required fields (Título and Resumen) and create the project.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto de Prueba para CRUD de Líneas de Acción')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Este proyecto es para probar las operaciones CRUD y la priorización de líneas de acción.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Nuevo Proyecto' button to create a new project for testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/main/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in 'Título' and 'Resumen' fields with test data and submit the form to create the project.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto de Prueba para CRUD de Líneas de Acción')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div/div/form/div/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto para probar operaciones CRUD y priorización de líneas de acción.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div/div/form/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Check for any validation errors or required fields not filled. If none found, report the website issue and stop further testing.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Nuevo Proyecto' button to try creating a new project again or explore alternative ways to create a project.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div/main/div/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in 'Título' and 'Resumen' fields with valid test data and submit the form to create the project.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto de Prueba para CRUD de Líneas de Acción')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto para probar operaciones CRUD y priorización de líneas de acción.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to access the project editing page directly via URL http://127.0.0.1:3000/dashboard/proyectos/1/editar to check if the project exists but is not listed.\n        await page.goto('http://127.0.0.1:3000/dashboard/proyectos/1/editar', timeout=10000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to restricted access to project editing page, preventing further CRUD operation tests on action lines.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[WARNING] No se encontró token de autenticación en localStorage (at http://127.0.0.1:3000/dashboard/proyectos/1/editar:731:24)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758772062154305//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.059Z",
    "modified": "2025-09-25T03:47:42.356Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "5e0986fe-41da-4085-8452-b171cc7087d6",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC009-Real-time Dashboard Metrics and Auto-refresh",
    "description": "Validate that the dashboard updates metrics, statistics, and visualizations in real-time with auto-refresh every 2 minutes.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to open login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then click 'Ingresar' to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try alternative login method using 'Login rápido para testing' button if available.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to the project editing page at http://127.0.0.1:3000/dashboard/proyectos/1/editar to simulate updates affecting dashboard metrics.\n        await page.goto('http://127.0.0.1:3000/dashboard/proyectos/1/editar', timeout=10000)\n        \n\n        # Fill in the project title and summary fields with new data, then save changes to simulate an update affecting dashboard metrics.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Proyecto de Investigación Actualizado')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div/div/form/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Resumen actualizado del proyecto para prueba de auto-refresh.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/div/div/form/div[9]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Reported the issue with project editing form resetting after save attempt. Cannot proceed with testing real-time dashboard updates due to inability to save project changes. Task stopped.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 500 (Internal Server Error) (at http://localhost:3000/api/private/dashboard/stats:0:0)\n[WARNING] ⚠️ Error cargando estadísticas (continuando sin ellas): Request failed with status code 500 (at http://localhost:3000/static/dashboard.js?v=clean-2024:786:20)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[WARNING] No se encontró token de autenticación en localStorage (at http://127.0.0.1:3000/dashboard/proyectos/1/editar:731:24)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771821595705//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.066Z",
    "modified": "2025-09-25T03:43:41.757Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "d3dee235-be84-4572-bb09-bd8efd074375",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC010-Multi-criterion Scoring and AI-Based Recommendations",
    "description": "Test automatic scoring of projects and products based on multi-criteria and validate AI generated recommendations for evaluation and improvement.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to login as admin.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin email and password, then click 'Ingresar' to login.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login failure prevents access to project editing and scoring features. Cannot proceed with testing automatic scoring and AI recommendations. Reporting issue and stopping further actions.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771732844593//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.073Z",
    "modified": "2025-09-25T03:42:13.005Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "96f92e5e-8da7-4d15-b68f-17eaa8883cf0",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC011-Advanced Search Filtering for Projects, Products and Users",
    "description": "Validate the advanced search functionality with various filters including categories, status, roles, and keywords returns precise and performant results.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Log in as admin to access advanced search and project editing features.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input admin credentials and submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login functionality is broken, preventing access to advanced search features. Testing cannot proceed without successful login. Issue reported and testing stopped.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771733930362//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.082Z",
    "modified": "2025-09-25T03:42:14.091Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "aac664b0-535b-4bf1-a4c0-29ce794f8a83",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC012-API REST Endpoints Security and Functionality",
    "description": "Ensure all REST API endpoints for user, project, product, line of action, and file management are secured, functional, and return appropriate status codes and data.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Attempt accessing all API endpoints without authentication to verify access is denied with 401 Unauthorized for protected endpoints.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Reported the issue with the 'Test' button not triggering API endpoint tests or showing any feedback. Stopping further actions as the current interface does not allow proceeding with the required API security and functionality tests.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771699226102//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.088Z",
    "modified": "2025-09-25T03:41:39.396Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "4a0aa4e7-9ec7-4aee-b87d-710ff52df227",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC013-Dashboard Visualization and Reporting Interactive Features",
    "description": "Test that the dashboard analytics canvases, graphs, and reports are fully interactive, correctly displaying metrics and allow detailed drill-downs.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Analíticas' to navigate to the analytics dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down to locate analytics canvases, graphs, and reports for interaction testing.\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Navigate directly to the specific dashboard URL http://127.0.0.1:3000/dashboard/proyectos/1/editar to test analytics and interactivity as per user instructions.\n        await page.goto('http://127.0.0.1:3000/dashboard/proyectos/1/editar', timeout=10000)\n        \n\n        # Click on 'Volver al Dashboard' link (index 2) to return to main dashboard and locate analytics section for project 1.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Analíticas' (index 3) to navigate to the analytics dashboard.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Analíticas' link (index 3) to navigate to the analytics dashboard page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to access the analytics dashboard. The 'Analíticas' link does not function as expected, preventing further testing of interactive analytics elements, filters, and export features.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[WARNING] No se encontró token de autenticación en localStorage (at http://127.0.0.1:3000/dashboard/proyectos/1/editar:731:24)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771780624049//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.100Z",
    "modified": "2025-09-25T03:43:00.772Z"
  },
  {
    "projectId": "0732a932-7c24-4ede-8f25-8da2defd9819",
    "testId": "4c7fcc39-e67b-4790-af93-2fb5438b2659",
    "userId": "0448a438-d021-705f-7bb1-6b2a1f0147bd",
    "title": "TC014-System Availability and Cloud-native Deployment Stability",
    "description": "Verify that the system maintains high availability and stability using Cloudflare Workers, D1 (SQLite), and R2 Storage under load conditions.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Click on 'Ingresar' button to start login process.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/nav/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Input email and password, then submit login form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin@demo.com')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('admin123')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Login failure prevents access to dashboard and project editing. Cannot proceed with load and stability testing using Cloudflare Workers, D1, and R2 Storage. Issue reported as blocker.\nBrowser Console Logs:\n[WARNING] cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation (at https://cdn.tailwindcss.com/:63:1710)\n[ERROR] Failed to load resource: the server responded with a status of 401 (Unauthorized) (at http://localhost:3000/api/auth/login:0:0)\n[ERROR] Error en login: M (at http://localhost:3000/static/app.js?v=20240914-production:1680:16)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/0448a438-d021-705f-7bb1-6b2a1f0147bd/1758771727128203//tmp/test_task/result.webm",
    "created": "2025-09-25T03:39:08.109Z",
    "modified": "2025-09-25T03:42:07.260Z"
  }
]
